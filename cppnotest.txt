

c++ Pointers and References
---------------------------
& means refers to 
* means pointer to

char* p = &v[3]; // p points to v's fourth element

char x = *p; //*p is the object that p points to 

In other words, * means "contents of" and prefix & means "address of".

Structures
--------
struct Vector{
	int sz;
	double* elem;
}

void vector_init(Vector& v,int s){
	v.elem = new double[s];
	v.sz = s;
}

v's elem member gets a pointer produced by the new operator and v's sz member gets the number of elements. The & in vector& indicates that we pass v by no-const reference; that way, vector_init() can modify the vector passed to it.

Vector v;
vector_init(v,s);

We use . (dot) to access struct members through a name(and through a reference) and -> to access struct members through a pointer.
void f(Vector v, Vector& rv, Vector* pv){
	int i1 = v.sz; //access through name
	int i2 = rv.sz; //access through reference
	int i4 = pv->sz; //access through pointer
}


Classes
------
class Vector {
	public:
		  Vector(int s) :elem{new double[s]},sz{s} {
		  	//construct a Vector
	}
		  double& operator[](int i){ return elem[i];
	}
		  int size() { return sz; }

	private:
		  double* elem; //pointer to the elements
		  int sz;       // the number of elements
};


Given that, we can define a variable of our new type Vector:
	Vector v(6); // a Vector with 6 elements



Box A < Box B if
1. A.l < B.l
2. A.b < B.b && A.l==B.l
3. A.h < B.h && A.b==B.b && A.l==B.l

 ostream& operator<< (ostream& output ,const Box &B)



  Box() {
    l = 0;
    b = 0;
    h = 0;
  }
  Box(int length, int breadth, int heigh) {
    length = l;
    breadth = b;
    height = h;
  }
  Box(const Box &B) {
    length = B.length;
    breadth = B.breadth;
    height = B.height;
  }



try{
	throw myex;
}
catch (exception& e){
	cout << e.what() << '\n';
}

catch (const std::invalid_argument& ia) {
	  std::cerr << "Invalid argument: " << ia.what() << '\n';
}


catch(bad_alloc& e){
	cout<<"Not enough memory"<<'\n';
}catch(exception &e){
	cout<<"Exception: "<<e.what()<<'\n';
}catch(...){
	cout<<"Other Exception"<<'\n';
}

