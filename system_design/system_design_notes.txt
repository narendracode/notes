Steps to appraoch system design interview : 

1. Understand problem statement/project scope
2. Why do we need this project?
3. Requirement or Goal of the system
    - Functional Requirements
    - Non Functional Requirements
    - Extended Requirements
4. Capacity Estimates and Constraints/Trade offs
    - Is it going to be read heavy or write heave or both
    - Traffic Estimates
    - Storage Estimates
    - Bandwidth Estimates
    - Memory Estimates
    - Draw a metrics with high level Estimates
5. Design High Level Diagram
6. Design APIs
7. Database Design


--------------
Requirement Gathering :
    1. Identify Actors
    2. Identify use cases
         - what system does from user point of view
         - What will the system do?
         - What will the sytem not do?


Requirement Clarification :
---------------------------
Ask questions related to what functionalities to implement.

Back-of-the-envelope estimation :
---------------------------------
What scale is expected from the system?
eg; number of new tweets, number of tweet views, number of timeline generations per sec., etc.

How much storage will we need? We will have different storage requirements if users can have photos and videos in their tweets.

What network bandwidth usage are we expecting? This will be crucial in deciding how we will manage traffic and balance load between servers.

System Interface Definition :
-----------------------------
Define the APIs expected from the system.

postTweet(user_id, tweet_data, tweet_location, user_location, timestamp, …) 
generateTimeline(user_id, current_time, user_location, …)  
markTweetFavorite(user_id, tweet_id, timestamp, …) 

Define Data Models :
--------------------
Defining the data model in the early part of the interview will clarify how data will flow between different components of the system. Identify various entities of the system and how they will interact with the each other and different aspects of data management like storage, transportation, encryption etc. 

Here are some entities for our Twitter-like service:
User: UserID, Name, Email, DoB, CreationData, LastLogin, etc.
Tweet: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.
UserFollow: UserID1, UserID2
FavoriteTweets: UserID, TweetID, TimeStamp

Which database should we use? Will NoSql like cassandra would be best fit or to use RDBMS like MySql. What kind of block storage to use to store photos and videos.


High Level Design :
-------------------
Draw a block diagram with 5 to 6 boxes representing the core components of our system. We should identify enough components that are needed to solve the actual problem from end to end.

Detailed Design :
-----------------
Dig Deepter into two or three major components; interviewer's feedback should always guide us to what parts of the system need further discussion. We should be able to present different approaches, their pros and cons, and explain why we will prefer one appraoch on the other. Remember there is no single answer; the only important thing is to consider tradeoffs between different options while keeping system constraints in mind.


- Since we will be storing a massive amount of data, how should we partition our data to distribute it to multiple databases? Should we try to store all the data of a user on the same database? What issue could it cause?
- How will we handle hot users who tweet a lot or follow lots of people?
- Since users’ timeline will contain the most recent (and relevant) tweets, should we try to store our data in such a way that is optimized for scanning the latest tweets?
- How much and at which layer should we introduce cache to speed things up?
- What components need better load balancing?

Identifying and resolving bottlenecks :
---------------------------------------
Try to discuss as many bottlenecks as possible and different approaches to mitigate them.

Bottlenecks include :
- single point of failures.
- Are there enough replicas of the data so that even if we loose a few instances of database, we can still serve our users.
- Do we have enough copies of different services running such that a few failures will not cause total system shutdown?
- How are we monitoring the performance of our service? 

concurrency :
-------------
Consider a use case, you're booking a booking a movie ticket and selecting seat, How to handle concurrency; such that no two users are able to book the same seat? We can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize Transaction Isolation Levels(https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/transaction-isolation-levels?view=sql-server-ver15) to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can’t be updated by anyone else. Here is the sample code:

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRANSACTION;
 
    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 
    Select * From ShowSeat where ShowID=99 && ShowSeatID in (54, 55, 56) && isReserved=0 
 
    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.
    update ShowSeat table...
    update Booking table ...

COMMIT TRANSACTION;

‘Serializable’ is the highest isolation level and guarantees safety from Dirty, Nonrepeatable, and Phantoms reads.

Once the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.


Transaction Isolation Levels (ODBC) :
------------------------------------
Transaction isolation levels are a measure of the extent to which transaction isolation succeeds. In particular, transaction isolation levels are defined by the presence or absence of the following phenomena:

Dirty Reads : A dirty read occurs when a transaction reads data that has not yet been committed. For example, suppose transaction 1 updates a row. Transaction 2 reads the updated row before transaction 1 commits the update. If transaction 1 rolls back the change, transaction 2 will have read data that is considered never to have existed.

Nonrepeatable Reads A nonrepeatable read occurs when a transaction reads the same row twice but gets different data each time. For example, suppose transaction 1 reads a row. Transaction 2 updates or deletes that row and commits the update or delete. If transaction 1 rereads the row, it retrieves different row values or discovers that the row has been deleted.

Phantoms A phantom is a row that matches the search criteria but is not initially seen. For example, suppose transaction 1 reads a set of rows that satisfy some search criteria. Transaction 2 generates a new row (through either an update or an insert) that matches the search criteria for transaction 1. If transaction 1 reexecutes the statement that reads the rows, it gets a different set of rows.


