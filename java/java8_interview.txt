java sort :
class Edge implements Comparable<Edge> {
	int src, dest, wt;
	Edge(int s,int d,int w){
		src = s;
		dest = d;
		wt = w;
	}
	public int compareTo(Edge e){
		return this.wt - e.wt;
	}
}






New features in java 8 :

Interface Default and static methods : 
--------------------------------------
	- Before java 8, interfaces could have only public abstract methods. It was not possible to add new functionality to the existing interface without forcing all implementation classes to create an implementation of the new methods, nor it was possible to create interface methods with an implementation.
	Starting java 8, interfaces can have static and default methods that, despite being declared in an interface have a defined behaviour.

	static method : 
		static String producer() {
			return "M&F Vehicles";
		}
	The static producer() method is available only through and inside of an interface. It can't be overridden by an implementing class.
	To call it outside the interface the standard approach for static method call should be used : 
	String producer = Vehicle.producer();

	default method :
	Default methods are declared using the new default keyword. These are accessible through the instance of the implementing class and can be overridden.
	Let's add a default method to our Vehicle interface, which will also make a call to the static method of this interface:
		default String getOverview() {
			return "ATV made by " + producer();
		}
	Assume that this interface is implemented by the class VehicleImpl. For executing  the default method an instance of the class should be created.
		Vehicle vehicle = new VehicleImpl();
		String overview = vehicle.getOverview();

Method References :
-------------------
Method reference can be used as a shorter and more readable alternative for a lambda expression  which only calls for an existing method. There are four variants of method references : 

	- References to a Static Method
		The reference to a static method holds the following syntax: ContainingClass::methodName.
		Let's try to count all empty strings in the List<String> with help of Stream API.

		boolean isReal = list.stream().anyMatch(u -> User.isRealUser(u));

		Take a closer look at lambda expression in the anyMatch() method, it just makes a call to a static method isRealUser(User user) of the User class. So it can be substituted with a reference to a static method:

		boolean isReal = list.stream().anyMatch(User::isRealUser);

	- Reference to an Instance Method
		The reference to an instance method holds the following syntax: containingInstance::methodName. Following code calls method isLegalName(String string) of type User which validates an input parameter:

		User user = new User();
		boolean isLegalName = list.stream().anyMatch(user::isLegalName);

	- Reference to an Instance Method of an Object of a Particular Type
		This reference method takes the following syntax: ContainingType::methodName. An example:
		
		long count = list.stream().filter(String::isEmpty).count();

	- Reference to a Constructor
		A reference to a constructor takes the following syntax: ClassName::new. As constructor in Java is a special method, method reference could be applied to it too with the help of new as a method name.

		Stream<User> stream = list.stream().map(User::new);

	- Creation of the Optional<T>
		An instance of the Optional class can be created with the help of its static methods:

		Optional<String> optional = Optional.empty();


Java stream API : 
-----------------
	- Stream Creation
	Streams can be created from different element sources e.g. collection or array with the help of stream() and of() methods:
		String[] arr = new String[]{"a", "b", "c"};
		Stream<String> stream = Arrays.stream(arr);
		tream<String> stream = Arrays.stream(arr);
		stream = Stream.of("a", "b", "c");
	A stream() default method is added to the Collection interface and allows creating a Stream<T> using any collection as an element source:
		Stream<String> stream = list.stream();

	- Multi-threading With Streams
		Stream API also simplifies multithreading by providing the parallelStream() method that runs operations over stream's elements in parallel mode.

		The code below allows to run method doWork() in parallel for every element of the stream:
		list.parallelStream().forEach(element -> doWork(element));

	- Stream Operations
		There are many useful operations that can be performed on a stream.
		They are divided into intermediate operations (return Stream<T>) and terminal operations (return a result of definite type). Intermediate operations allow chaining.
		It's also worth noting that operations on streams don't change the source.

		long count = list.stream().distinct().count();

		In above, the distinct() method represents an intermediate operation, which creates a new stream of unique elements of the previous stream. And the count method is a terminal operation, which returns stream's size.

	- Iterating
		Stream API helps to substitute for, for-each and while loops. It allows concentrating on operation's logic, but not on the iteration over the sequence of elements. For example : 
		for (String string : list) {
    		if (string.contains("a")) {
        		return true;
    			}
			}
		The above code can be changed with just one line of java 8 code : 
			boolean isExist  = list.stream().anyMatch(element -> element.contains("a"));
	- Filtering 
		The filter() method allows us to pick stream of elements which satisfy a predicate.
		For example, consider the following list:
		ArrayList<String> list = new ArrayList<>();
		list.add("One");
		list.add("OneAndOnly");
		list.add("Derek");
		list.add("Change");
		list.add("factory");
		list.add("justBefore");
		list.add("Italy");
		list.add("Italy");
		list.add("Thursday");
		list.add("");
		list.add("");

		The following code creates a Stream<String> of the List<String>, finds all elements of this stream which contain char “d” and creates a new stream containing only the filtered elements:
			Stream<String> stream = list.stream().filter(element -> element.contains("d"));

	- Mapping 
		To convert elements of a Stream by applying a special function to them and to collect these new elements into a Stream, we can use the map() method:
		List<String> uris = new ArrayList<>();
		uris.add("C:\\My.txt");
		Stream<Path> stream = uris.stream().map(uri -> Paths.get(uri));

	- Matching
		Stream API gives a handy set of instruments to validate elements of a sequence according to some predicate. To do this one of the following methods can be used: anyMatch(), allMatch(), noneMatch(). Their names are self-explaining. Those are terminal operations which return a boolean

		boolean isValid = list.stream().anyMatch(element -> element.contains("h")); // true
		boolean isValidOne = list.stream().allMatch(element -> element.contains("h")); // false
		boolean isValidTwo = list.stream().noneMatch(element -> element.contains("h")); // false

	- Reduction
		Stream API allows reducing a sequence of elements to some value according to a specified function with the help of the reduce() method of the type Stream. This method takes two parameters: first – start value, second – an accumulator function.

		Imagine that you have a List<Integer> and you want to have a sum of all these elements and some initial Integer (in this example 23). So, you can run the following code and result will be 26 (23 + 1 + 1 + 1).

		List<Integer> integers = Arrays.asList(1, 1, 1);
		Integer reduced = integers.stream().reduce(23, (a, b) -> a + b);

	- Collecting
		The reduction can also be provided by the collect() method of type Stream. This operation is very handy in case of converting a stream to a Collection or a Map and representing a stream in form of a single string. There is a utility class Collectors which provide a solution for almost all typical collecting operations. For some, not trivial tasks, a custom Collector can be created.

		List<String> resultList = = list.stream().map(element -> element.toUpperCase()).collect(Collectors.toList());
	