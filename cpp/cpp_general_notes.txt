
Variables
-----------------
Each address location typically hold 8 bit of data. A 4-byte int value occupies memory of 4 memory loations. A 32-bit system typically uses 32 bit addresses. To store a 32 bit address, 4 memory locations are required.

int 4 bytes 
short 2 bytes
double 8 bytes
int* (pointer) 4 bytes

To each the burden of programming using numerical address and programmer-intepreted data, early programming languages such as C introduced the concept of variables. A variable is named location that can store a value of a particular type. Instead of numerical addresses, names are attached to certain addresses. Also types(such as int, double, char) as associated with the contents for ease of interpretation of data.


Pointers
--------
Unlike varibles which stores int,double, char etc type values, pointers store memory address.

Declaring Pointer
----------------
type *ptr; // Declares a pointer variable called ptr as a pointer of "type"
// or
type* ptr;
// or
type * ptr;

eg;
int * iPtr; //Declares a pointer variable called iPtr pointing to an int. It contains an address, that address hold an int value
double * dPtr; // Declares a pointer varible called dPtr pointing to double. It contains an address, that address hold a double value

Initializing Pointers via the address of operator(&)
---------------------------------------------------
When you declare a pointer variable, its content is not initialized. Initialization of pointer is done via the address-of operator(&).

The address-of operator(&) operates on a variable, and returns the address of the variable. For example, if 'number' is an int variable, &number returns the address of the variable 'number'.
eg;
int number = 88; //Declares a variable 'number' of type int and assign a value 88 
int * pNumber;  // Declare a pointer variable called pNumber pointing to an int (or int pointer)
pNumber = &number; //Assign the address of the variable 'number' to pointer pNumber

int * pAnother = &number; // Declare another pointer pAnother and assign address of varible number to it.


Indirection or Dereferencing Operator
-------------------------------------
The indirection operator (or dereferencing operator) (*) operators on pointer and returns the value stored in the address kept in pointer variable. 

eg; 
int number = 88; 		//Declares a variable 'number' of type int and assign a value 88 
int *pNumber = &number; //Declares a pointer variable pNumber of type int which stores the address of variable 'number'

cout << *pNumber << endl; // Prints the value "pointed to" by the pointer, which is an int (88)

*pNumber = 99  // Assign a value to where the pointer is pointed to, NOT to the pointer variable

cout << *pNumber << endl; // Print the new value "pointed to" by the pointer (99)
cout << number << endl;   // The value of variable number changes as well (99)

Take note that pNumber stores a memory address location, whereas *pNumber refers to the value stored in the address kept in the pointer variable, or the value pointed to by the pointer.

As illustrated, a variable (such as number) directly references a value, whereas a pointer indirectly references a value through the memory address it stores. Referencing a value indirectly via a pointer is called indirection or dereferencing.


Pointer has a Type Too
----------------------
A pointer is associated with a type (of the value it points to), which is specified during declaration. A pointer can only hold an address of the declared type; it cannot hold an address of a different type.


Null Pointers
-------------
You can initialize a pointer to 0 or NULL, i.e., it points to nothing. It is called a null pointer. Dereferencing a null pointer (*p) causes an STATUS_ACCESS_VIOLATION exception.

int * iPtr = 0;         // Declare an int pointer, and initialize the pointer to point to nothing
cout << *iPtr << endl;  // ERROR! STATUS_ACCESS_VIOLATION exception
 
int * p = NULL;         // Also declare a NULL pointer points to nothing



Reference Variables
-------------------
C++ added the so-called reference variables (or references in short). A reference is an alias, or an alternate name to an existing variable. For example, suppose you make peter a reference (alias) to paul, you can refer to the person as either peter or paul.

The main use of references is acting as function formal parameters to support pass-by-reference. In an reference variable is passed into a function, the function works on the original copy (instead of a clone copy in pass-by-value). Changes inside the function are reflected outside the function.

A reference is similar to a pointer. In many cases, a reference can be used as an alternative to pointer, in particular, for the function parameter.

Recall that C/C++ use & to denote the address-of operator in an expression. C++ assigns an additional meaning to & in declaration to declare a reference variable.

The meaning of symbol & is different in an expression and in a declaration. When it is used in an expression, & denotes the address-of operator, which returns the address of a variable, e.g., if number is an int variable, &number returns the address of the variable number (this has been described in the above section).

Howeve, when & is used in a declaration (including function formal parameters), it is part of the type identifier and is used to declare a reference variable (or reference or alias or alternate name). It is used to provide another name, or another reference, or alias to an existing variable.

The syntax is as follow:

type &newName = existingName;
// or
type& newName = existingName;
// or
type & newName = existingName;  // I shall adopt this convention



/* Test reference declaration and initialization (TestReferenceDeclaration.cpp) */
#include <iostream>
using namespace std;
 
int main() {
   int number = 88;          // Declare an int variable called number
   int & refNumber = number; // Declare a reference (alias) to the variable number
                             // Both refNumber and number refer to the same value
 
   cout << number << endl;    // Print value of variable number (88)
   cout << refNumber << endl; // Print value of reference (88)
 
   refNumber = 99;            // Re-assign a new value to refNumber
   cout << refNumber << endl;
   cout << number << endl;    // Value of number also changes (99)
 
   number = 55;               // Re-assign a new value to number
   cout << number << endl;
   cout << refNumber << endl; // Value of refNumber also changes (55)
}



Pass-By-Reference into Functions with Reference Arguments vs. Pointer Arguments
-------------------------------------------------------------------------------

Pass by value :
In C/C++, by default, arguments are passed into functions by value (except arrays which is treated as pointers). That is, a clone copy of the argument is made and passed into the function. Changes to the clone copy inside the function has no effect to the original argument in the caller. In other words, the called function has no access to the variables in the caller. For example,

/* Pass-by-value into function (TestPassByValue.cpp) */

#include <iostream>
using namespace std;
 
int square(int);
 
int main() {
   int number = 8;
   cout <<  "In main(): " << &number << endl;  // 0x22ff1c
   cout << number << endl;         // 8
   cout << square(number) << endl; // 64
   cout << number << endl;         // 8 - no change
}
 
int square(int n) {  // non-const
   cout <<  "In square(): " << &n << endl;  // 0x22ff00
   n *= n;           // clone modified inside the function
   return n;
}

Pass-by-Reference with Pointer Arguments : 
In many situations, we may wish to modify the original copy directly (especially in passing huge object or array) to avoid the overhead of cloning. This can be done by passing a pointer of the object into the function, known as pass-by-reference. For example

/* Pass-by-reference using pointer (TestPassByPointer.cpp) */
#include <iostream>
using namespace std;
 
void square(int *);
 
int main() {
   int number = 8;
   cout <<  "In main(): " << &number << endl;  // 0x22ff1c
   cout << number << endl;   // 8
   square(&number);          // Explicit referencing to pass an address
   cout << number << endl;   // 64
}
 
void square(int * pNumber) {  // Function takes an int pointer (non-const)
   cout <<  "In square(): " << pNumber << endl;  // 0x22ff1c
   *pNumber *= *pNumber;      // Explicit de-referencing to get the value pointed-to
}

Pass-by-Reference with Reference Arguments : 
Instead of passing pointers into function, you could also pass references into function, to avoid the clumsy syntax of referencing and dereferencing. For example,

/* Pass-by-reference using reference (TestPassByReference.cpp) */
#include <iostream>
using namespace std;
 
void square(int &);
 
int main() {
   int number = 8;
   cout <<  "In main(): " << &number << endl;  // 0x22ff1c
   cout << number << endl;  // 8
   square(number);          // Implicit referencing (without '&')
   cout << number << endl;  // 64
}
 
void square(int & rNumber) {  // Function takes an int reference (non-const)
   cout <<  "In square(): " << &rNumber << endl;  // 0x22ff1c
   rNumber *= rNumber;        // Implicit de-referencing (without '*')
}


Ascii values : 
A - 65
Z - 90
a - 97
z - 122

----


Reading string from std
------------------------
	int t;
	cin >> t;
	string val;

	cin.ignore(); //to flush the buffer
	while (t--) {
		getline(cin, val);
		cout << "value : " << val << endl;
	}