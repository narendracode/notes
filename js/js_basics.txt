
var vs const vs let
-------------------
'const' are read-only which means that once they are initialized using 'const', they cannot be re-assigned.

scope of var, let and const  :
The primary reason to introduce let and const in new js version was to allow programmers to decide scope options for their defined varibles. 
Scope of all these keywords are :
- var : Function in which the variable is declared
- let : Block in which the variable is declared 
- const : Block in which the variable is declared

function foo(){
  for (var i=0; i<5 ; i++){
    console.log(i);
  }
  console.log(i);
}
foo();

In the above code if you replace 'var' with 'let' then you will get the error ReferenceError: i is not defined. This shows that 'i' is only accessible within the curly brackets.

Rules of Thumb :
- Don't use 'var', because 'let' and 'const' is more specific
- Default to 'const', because it cannot be re-assigned or re-declared
- Use 'let' when you want to re-assign the variable in future
- Always prefer using 'let' over 'var' and 'const' over 'let'

Unary Operators:
---------------
As mentioned earlier, unary operators take only one operand in order to perform a specific operation. Some of the commonly used unary operators in JavaScript are:

- typeof : Returns the type of the given operand
- delete : Deletes an object, object's attribute or an instance in an array
- void : Specifies that an expression does not return anything
- Increment Operators : ++,--

=== vs ==
---------
The operator === is commonly referred as Deep Equals in JavaScript. The only difference between double equals == and deep equals is that the former does not perform type comparison but in fact, converts the type of one of the operands to make their types same. Deep equals, on the other hand, returns false if both types are not the same.

console.log(1 == 1); //returns true
console.log('1' == 1); //returns true
console.log(1 === 1); //returns true
console.log('1' === 1); //returns false

Expressions 
-----------
Anything that evaluates to a value is called an expression. Some of the basic expressions and keywords used in JavaScript are mentioned below:

- this: points to the current object
- super: calls methods on an object's parent, for example, call parent's constructor
- function: used to define a function
- function* : used to define a generator function
- async function : used to define an async function 
