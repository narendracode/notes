Order of Growth Comparision :
-----------------------------
C < LogLog n < LogN < n^1/3 < n^1/2 < n < n^2 < n^3 < n^4 < 2^n < n^n



Ranges of Input and Output
---------------------------
int most compilers :
- int are 32 bit
- long long are 64 bit

Note :
** -2^31 <= int <= 2^31 - 1
** 0 <= unsigned <= 2^32 - 1 
** -2^63 << long long <= 2^63 - 1
** 0 <= unsigned long long <= 2^64 - 1

2^31 ~ 2.147 x 10^9
2^63 ~ 9.2 x 10^18
2^64 ~ 1.8 x 10^19


Ascii values : 
A - 65
Z - 90
a - 97
z - 122

0 - 48
9 - 57

Reverse LinkedList : 

ListNode* reverse(ListNode *head){
    ListNode *current = head;     
    ListNode *previous = NULL;
    ListNode *next = NULL; 
    while (current != NULL) {
        next = current->next;      
        current->next = previous;  
        previous = current;  
        current = next; 
    }
    return previous;
}


Modular arithematic :
--------------------
(a+b)%c = ((a%c) + (b%c))%c
(a*b)%c = ( (a%c) * (b%c))%c
(a-b)%c = ( (a%c) - (b%c) + c )%c
(a/b)%c = ( (a%c) * (b^-1 %c)) %c


GCD:
---
int gcd(int a, int b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b); 
     
}


Sum of n terms (Airhmatic Progression) 
---------------------------------------
sum(n) = (n/2) * ( (2a + ((n-1) * d) ) )
nth term = mth term + (n-m)d
average =  (first term + last term)/2

Geometric Progression
----------------------
a, ar, ar^2, ar^2.... ar^n 
nth term = ar^(n-1)
sum  =  a(1-r^n)/(1-r)

Sum of squares :
---------------
sum(n) = ((n)(n+1)(2n + 1))/6